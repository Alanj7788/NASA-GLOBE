### **AIM:**
To compute the height of a binary tree, where the height is defined as the number of edges in the longest path from the root to a leaf.

### **DATA Structures Used:**
- **Binary Tree**: Represented using a linked structure with nodes having integer data and pointers to left and right child nodes.

### **Algorithm:**

#### 1. **Function: `int height(struct tree* node)`**
   - **Step 1:** Start.
   - **Step 2:** If `node` is `NULL`:
     - a. Return `0`.
   - **Step 3:** Recursively compute the height of the left subtree (`leftHeight`).
   - **Step 4:** Recursively compute the height of the right subtree (`rightHeight`).
   - **Step 5:** Return the maximum of `leftHeight` and `rightHeight` plus `1` (to account for the current node).
   - **Step 6:** End.

#### 2. **Function: `struct tree* newNode(int data)`**
   - **Step 1:** Start.
   - **Step 2:** Allocate memory for a new tree node.
   - **Step 3:** Initialize the node with the provided `data`, and set `left` and `right` pointers to `NULL`.
   - **Step 4:** Return the newly created node.
   - **Step 5:** End.

#### 3. **Function: `void buildtree(struct tree *ptr)`**
   - **Step 1:** Start.
   - **Step 2:** If `ptr` is not `NULL`:
     - a. Prompt the user to enter data for the node.
     - b. Set `left` and `right` pointers to `NULL`.
     - c. Prompt the user to create a left child:
       - i. If yes, allocate memory for the left child and recursively call `buildtree` for it.
     - d. Prompt the user to create a right child:
       - i. If yes, allocate memory for the right child and recursively call `buildtree` for it.
   - **Step 3:** End.

#### 4. **Function: `int main()`**
   - **Step 1:** Start.
   - **Step 2:** Create a root node and build the tree using `buildtree`.
   - **Step 3:** Compute the height of the tree using `height`.
   - **Step 4:** Print the height of the tree.
   - **Step 5:** End.

### **Result:**
The program correctly calculates the height of a binary tree by implementing a recursive function to determine the height of each subtree and comparing them. The height of the tree is displayed, showing the longest path from the root to a leaf node in terms of the number of edges. 
