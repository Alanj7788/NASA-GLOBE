AIM:
To implement a program that converts a given sparse matrix into its tuple form, where each non-zero element is represented by a triplet (row, column, value).

DATA Structures Used:
Array

Algorithm:
1. Function: void read(int a[10][10], int m, int n)
Step 1: Start.
Step 2: For each element in the matrix (of size m x n):
Prompt the user to enter the value.
Store the value in the corresponding position in the array a.
Step 3: End.
2. Function: void sparse(int a[10][10], int m, int n, int s[100][3])
Step 1: Start.
Step 2: Initialize a counter k to 1.
Step 3: Store the number of rows m and columns n in the first row of s, i.e., s[0][0] = m and s[0][1] = n.
Step 4: Iterate through the matrix a:
If the element is non-zero:
Store the row index i in s[k][0].
Store the column index j in s[k][1].
Store the value of the element in s[k][2].
Increment k.
Step 5: Store the total number of non-zero elements k - 1 in s[0][2].
Step 6: End.
3. Function: void print(int s[100][3])
Step 1: Start.
Step 2: Retrieve the number of non-zero elements from s[0][2].
Step 3: Print the triplet format (row, column, value) for each non-zero element:
Loop through each entry in s and print the triplet values.
Step 4: End.
4. Function: int main()
Step 1: Start.
Step 2: Declare the matrix a[10][10] and tuple matrix s[100][3].
Step 3: Prompt the user to enter the size of the matrix.
Step 4: Read the matrix using the read(a, m, n) function.
Step 5: Convert the matrix to its tuple form using sparse(a, m, n, s).
Step 6: Print the tuple form using print(s).
Step 7: End.

### **Result:**
The program successfully converts a given matrix into its sparse matrix representation in tuple form and displays the result.