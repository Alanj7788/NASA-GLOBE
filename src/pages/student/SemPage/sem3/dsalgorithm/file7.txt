
### **AIM:**
To implement a program that performs merge sort on an array.

### **DATA Structures Used:**
- **Array**

### **Algorithm:**

#### 1. **Function: `void merge(int a[], int first, int mid, int last)`**
   - **Step 1:** Start.
   - **Step 2:** Calculate the size of the left sub-array (`n1`) and right sub-array (`n2`).
   - **Step 3:** Create temporary arrays `LeftArray[]` and `RightArray[]` to hold elements of the left and right sub-arrays.
   - **Step 4:** Copy the elements from the original array to the temporary arrays `LeftArray[]` and `RightArray[]`.
   - **Step 5:** Initialize three indices `i = 0`, `j = 0`, and `k = first`.
   - **Step 6:** While both sub-arrays have elements to compare:
     - a. If `LeftArray[i] <= RightArray[j]`, assign `a[k] = LeftArray[i]` and increment `i`.
     - b. Otherwise, assign `a[k] = RightArray[j]` and increment `j`.
     - c. Increment `k`.
   - **Step 7:** Copy any remaining elements of `LeftArray[]` to the original array.
   - **Step 8:** Copy any remaining elements of `RightArray[]` to the original array.
   - **Step 9:** End.

#### 2. **Function: `void mergeSort(int a[], int first, int last)`**
   - **Step 1:** Start.
   - **Step 2:** If `first < last`:
     - a. Calculate the mid-point `mid = (first + last) / 2`.
     - b. Recursively sort the left half `mergeSort(a, first, mid)`.
     - c. Recursively sort the right half `mergeSort(a, mid + 1, last)`.
     - d. Merge the sorted halves using `merge(a, first, mid, last)`.
   - **Step 3:** End.

#### 3. **Function: `void read(int a[], int n)`**
   - **Step 1:** Start.
   - **Step 2:** For each index `i` from `0` to `n-1`:
     - a. Read the element and store it in `a[i]`.
   - **Step 3:** End.

#### 4. **Function: `void display(int a[], int n)`**
   - **Step 1:** Start.
   - **Step 2:** For each index `i` from `0` to `n-1`:
     - a. Print the element `a[i]` followed by a space.
   - **Step 3:** End.

#### 5. **Function: `int main()`**
   - **Step 1:** Start.
   - **Step 2:** Declare an integer array `a[10]` and integer variable `n`.
   - **Step 3:** Prompt the user to enter the number of elements (`n`) and read it.
   - **Step 4:** Prompt the user to enter `n` elements and read them into the array `a[]` using `read(a, n)`.
   - **Step 5:** Display the unsorted array using `display(a, n)`.
   - **Step 6:** Call `mergeSort(a, 0, n-1)` to sort the array using merge sort.
   - **Step 7:** Display the sorted array using `display(a, n)`.
   - **Step 8:** End.

---

### **Result:**
The program successfully implements merge sort, sorting the array in ascending order.
