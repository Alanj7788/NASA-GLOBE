AIM:
To implement a program that performs binary search on a sorted array using recursion.

DATA Structures Used:
Array

Algorithm:

1. Function: void read(int a[], int n)
    Step 1: Start.
    Step 2: For each index i from 0 to n-1:
        a. Read the element and store it in a[i].
    Step 3: End.
2. Function: int BinarySearch(int a[], int start, int end, int element)
    Step 1: Start.
    Step 2: If end is greater than or equal to start:
        a. Calculate the middle index as middle = start + (end - start) / 2.
        b. If a[middle] is equal to element, return middle (element found).
        c. If a[middle] is greater than element, recursively call BinarySearch on the left subarray with updated end as middle-1.
        d. If a[middle] is less than element, recursively call BinarySearch on the right subarray with updated start as middle+1.
    Step 3: If the element is not found, return -1.
    Step 4: End.
3. Function: int main()
    Step 1: Start.
    Step 2: Declare an integer array a[10] and integer variables n, element, and flag.
    Step 3: Prompt the user to enter the number of elements (n) and read it.
    Step 4: Call read(a, n) to read n elements into the array a[].
    Step 5: Prompt the user to enter the element to be searched (element) and read it.
    Step 6: Call BinarySearch(a, 0, n-1, element) to search for the element in the array.
    Step 7: If flag is -1, print "Element not found in the array".
    Step 8: Otherwise, print "Element found at index : flag+1".
    Step 9: End.

Result:
The program successfully implements binary search using recursion.