### **AIM:**
To implement a queue using a linked list.

### **DATA Structures Used:**
- **Structure `node`:** Defines a node with integer data and a pointer to the next node (`link`).
- **Pointers `front` and `rear`:** `front` points to the start of the queue, and `rear` points to the end of the queue.

### **Algorithm:**

#### 1. **Function: `void display()`**
   - **Step 1:** Check if the queue is empty (`front` is NULL). If so, print "Queue is empty".
   - **Step 2:** Traverse the queue from `front` to `rear`, printing each node’s data followed by an arrow (`-->`). Print "NULL" at the end.

#### 2. **Function: `void enqueue(int item)`**
   - **Step 1:** Allocate memory for a new node.
   - **Step 2:** Set the new node’s data to `item` and its link to NULL.
   - **Step 3:** If the queue is empty (`front` is NULL), set both `front` and `rear` to the new node.
   - **Step 4:** Otherwise, update the `link` of `rear` to the new node, and then update `rear` to point to the new node.
   - **Step 5:** Call `display()` to show the updated queue.

#### 3. **Function: `void dequeue()`**
   - **Step 1:** Check if the queue is empty (`front` is NULL). If so, print "Queue is empty".
   - **Step 2:** If the queue has only one node (`front` is equal to `rear`), store `front` in a temporary pointer (`temp`), set both `front` and `rear` to NULL, and free the memory of the removed node.
   - **Step 3:** Otherwise, store `front` in a temporary pointer (`temp`), update `front` to point to the next node (`front->link`), and free the memory of the removed node.
   - **Step 4:** Call `display()` to show the updated queue.

#### 4. **Function: `int main()`**
   - **Step 1:** Initialize `front` and `rear` to NULL.
   - **Step 2:** Implement a menu-driven interface to call `enqueue`, `dequeue`, and `display` based on user input.

### **Result:**
The program successfully implements a queue using a linked list and provides functionalities to:
- **Enqueue** an item into the queue.
- **Dequeue** an item from the queue.
- **Display** the current elements in the queue.