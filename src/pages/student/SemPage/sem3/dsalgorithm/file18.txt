### **Aim:**
To implement a queue using arrays with operations for enqueue, dequeue, and display.

### **Data Structures Used:**
- **Array (`a[20]`):** To store the queue elements.

### **Algorithm:**

#### 1. **Function: `void ENQUEUE(int item)`**
   - **Step 1:** Check if the queue is full (`rear == size-1`).
     - If full, print an error message.
   - **Step 2:** If the queue is empty (`rear == -1`), set both `front` and `rear` to 0, and insert the item.
   - **Step 3:** Otherwise, increment the `rear` index and insert the item at the new `rear` position.

#### 2. **Function: `void DEQUEUE()`**
   - **Step 1:** Check if the queue is empty (`front == -1`).
     - If empty, print an error message.
   - **Step 2:** If the queue has only one element (`front == rear`), print the item, and reset `front` and `rear` to `-1`.
   - **Step 3:** Otherwise, print the item at the `front` position and increment the `front` index.

#### 3. **Function: `void DISPLAY()`**
   - **Step 1:** Check if the queue is empty (`front == -1`).
     - If empty, print an error message.
   - **Step 2:** Otherwise, iterate from `front` to `rear` and print the elements of the queue.

#### 4. **Main Function (`int main()`)**
   - **Step 1:** Initialize `front` and `rear` to `-1`.
   - **Step 2:** Read the size of the queue from the user.
   - **Step 3:** Present a menu for queue operations:
     - `1`: Enqueue an item.
     - `2`: Dequeue an item.
     - `3`: Display the queue.
     - `4`: Exit the program.
   - **Step 4:** Perform the chosen operation until the user selects to exit.

---

### **Result:**
The program manages a queue of integers, allowing items to be added (enqueue), removed (dequeue), and displayed. It correctly handles conditions like full and empty queues, as demonstrated in the example output.