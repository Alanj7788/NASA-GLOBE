### **Aim:**
To implement a circular queue using arrays with operations for enqueue, dequeue, and display.

### **Data Structures Used:**
- **Array (`a[20]`):** To store the elements of the circular queue.

### **Algorithm:**

#### 1. **Function: `void ENQUEUE_CQ(int item)`**
   - **Step 1:** Check if the queue is full:
     - If `(rear + 1) % size == front`, the queue is full. Print an error message.
   - **Step 2:** If the queue is empty (`rear == -1`), initialize both `front` and `rear` to `0`, and insert the item.
   - **Step 3:** Otherwise, calculate the new position for `rear` using `(rear + 1) % size`, and insert the item at this position.

#### 2. **Function: `void DEQUEUE_CQ()`**
   - **Step 1:** Check if the queue is empty (`front == -1`).
     - If empty, print an error message.
   - **Step 2:** If the queue has only one element (`front == rear`), print the item at `front`, and reset `front` and `rear` to `-1`.
   - **Step 3:** Otherwise, print the item at `front` and update the `front` index using `(front + 1) % size`.

#### 3. **Function: `void DISPLAY_CQ()`**
   - **Step 1:** Check if the queue is empty (`front == -1`).
     - If empty, print an error message.
   - **Step 2:** If `front` is less than or equal to `rear`, iterate from `front` to `rear` and print the elements.
   - **Step 3:** If `front` is greater than `rear`, print elements from `front` to the end of the array and then from the start of the array to `rear`.

#### 4. **Main Function (`int main()`)**
   - **Step 1:** Initialize `front` and `rear` to `-1`.
   - **Step 2:** Read the size of the queue from the user.
   - **Step 3:** Present a menu for queue operations:
     - `1`: Enqueue an item.
     - `2`: Dequeue an item.
     - `3`: Display the queue.
     - `4`: Exit the program.
   - **Step 4:** Perform the chosen operation until the user selects to exit.

---

### **Result:**
The program effectively manages a circular queue with integer elements, providing operations to enqueue, dequeue, and display elements. It correctly handles full and empty conditions, as demonstrated in the example output.