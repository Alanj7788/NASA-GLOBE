### **AIM:**
To convert an infix expression into a postfix expression using a stack.

### **DATA Structures Used:**
- **Stack (`stack[SIZE]`):** To hold operators and parentheses.


### **Algorithm:**

#### 1. **Function: `void push(char item)`**
   - **Step 1:** Check if the stack is full:
     - a. Print "Stack Overflow" and exit if true.
   - **Step 2:** Otherwise, increment `top` and push the `item` onto the stack.

#### 2. **Function: `char pop()`**
   - **Step 1:** Check if the stack is empty:
     - a. Print "Stack Underflow" and exit if true.
   - **Step 2:** Otherwise, return the item at the top of the stack and decrement `top`.

#### 3. **Function: `int is_operator(char symbol)`**
   - **Step 1:** Return `1` if `symbol` is an operator (`^`, `*`, `/`, `+`, `-`), otherwise return `0`.

#### 4. **Function: `int precedence(char symbol)`**
   - **Step 1:** Return precedence based on `symbol`: `3` for `^`, `2` for `*` and `/`, `1` for `+` and `-`, `0` otherwise.

#### 5. **Function: `void InfixToPostfix(char infix_exp[], char postfix_exp[])`**
   - **Step 1:** Initialize stack and append `')'` to `infix_exp`.
   - **Step 2:** Loop through each character in `infix_exp`:
     - a. Push `'('` onto the stack.
     - b. Add digits/alphabets directly to `postfix_exp`.
     - c. Handle operators by popping from the stack based on precedence and pushing the current operator.
     - d. Handle closing parenthesis by popping until an opening parenthesis is encountered.
     - e. Print an error message for invalid characters and exit.
   - **Step 3:** Ensure no operators are left in the stack and terminate.

#### 6. **Function: `int main()`**
   - **Step 1:** Read the infix expression into `infix`.
   - **Step 2:** Call `InfixToPostfix` to convert it to postfix.
   - **Step 3:** Print the postfix expression.

---

### **Result:**
The program converts the infix expression `(3^2*5)/(3*2-3)+5` to the postfix expression `32^5*32*3-/5+`.