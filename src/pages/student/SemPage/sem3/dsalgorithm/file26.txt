Here’s the AIM, ALGORITHM, and RESULT for the polynomial addition program using a linked list:

### AIM:
To implement a program that performs polynomial addition using a linked list in C. The program reads two polynomials from the user, adds them, and displays the resultant polynomial.

### ALGORITHM:

1. **Start.**

2. **Function `readpoly`:**
   - Step 1: Initialize a `head` pointer to `NULL`.
   - Step 2: Prompt the user to enter the number of terms in the polynomial.
   - Step 3: For each term, do the following:
     - a. Allocate memory for a new node.
     - b. Read the coefficient and exponent of the term.
     - c. Set the `link` of the new node to `NULL`.
     - d. If the list is empty, set `head` to point to the new node.
     - e. If the list is not empty, add the new node at the end.
   - Step 4: Return the `head` pointer, which points to the first node of the polynomial.

3. **Function `displaypoly`:**
   - Step 1: If the polynomial list is empty, print "Polynomial is empty".
   - Step 2: Otherwise, traverse through the list and print each term in the format `coef x^expo`.
   - Step 3: If the current node is not the last node, print a " + " between terms.

4. **Function `addpoly`:**
   - Step 1: Initialize two pointers `p` and `q` to point to the heads of the two polynomials.
   - Step 2: Initialize `head` to `NULL` for the resultant polynomial.
   - Step 3: While both `p` and `q` are not `NULL`, do:
     - a. If the exponents of `p` and `q` are equal, add the coefficients and create a new node for the result.
     - b. If the exponent of `p` is greater, create a new node with `p`’s term and move `p` forward.
     - c. If the exponent of `q` is greater, create a new node with `q`’s term and move `q` forward.
     - d. Append the new node to the result list.
   - Step 4: If any terms remain in either polynomial, append them directly to the result list.
   - Step 5: Return the `head` pointer, which points to the first node of the resultant polynomial.

5. **Function `main`:**
   - Step 1: Read the first polynomial using `readpoly`.
   - Step 2: Read the second polynomial using `readpoly`.
   - Step 3: Display both polynomials using `displaypoly`.
   - Step 4: Add the two polynomials using `addpoly`.
   - Step 5: Display the resultant polynomial using `displaypoly`.

6. **End.**

### RESULT:
The program successfully reads two polynomials from the user, performs polynomial addition using a linked list, and displays the resulting polynomial. The user is able to see the coefficients and exponents of the terms in each polynomial and the resulting polynomial after the addition.