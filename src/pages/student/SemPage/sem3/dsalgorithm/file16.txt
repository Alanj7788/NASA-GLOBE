### **AIM:**
To convert an infix expression into a prefix expression.


### **Algorithm:**

#### 1. **Function: `int precedence(char c)`**
   - **Step 1:** Return the precedence of the operator `c`:
     - `+` and `-` have precedence `1`.
     - `*` and `/` have precedence `2`.
     - `^` has precedence `3`.

#### 2. **Function: `void infix_to_prefix()`**
   - **Step 1:** Initialize variables `i`, `j`, `x`, and `y`.
   - **Step 2:** Traverse the infix expression:
     - a. If the character is a digit, append it to `p`.
     - b. If the character is `)`, push it onto the stack `s`.
     - c. If the character is `(`:
       - i. Pop from the stack until `)` is encountered.
       - ii. Discard the `)` from the stack.
     - d. For operators:
       - i. Compare precedence with the operator on top of the stack and pop from the stack to `p` if necessary.
       - ii. Push the current operator onto the stack.
   - **Step 3:** Pop any remaining operators from the stack to `p`.
   - **Step 4:** Reverse the string `p` to get the prefix expression and print it.

#### 3. **Function: `int main()`**
   - **Step 1:** Read the infix expression into `a`.
   - **Step 2:** Call `infix_to_prefix()` to convert and display the prefix expression.

---

### **Result:**
The program converts the infix expression `123+-/*` to the prefix expression `+-/*321`.